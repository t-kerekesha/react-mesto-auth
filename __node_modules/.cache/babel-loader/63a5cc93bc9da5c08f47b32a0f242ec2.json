{"ast":null,"code":"import { validationParams, formValidators } from './constants';\nclass FormValidator {\n  constructor(settings, form) {\n    this._selectors = {\n      inputClass: settings.inputClass,\n      inputSelector: settings.inputSelector,\n      inputErrorClass: settings.inputErrorClass,\n      errorClass: settings.errorClass,\n      submitButtonSelector: settings.submitButtonSelector\n    };\n    this._form = form;\n    this._submitButton = this._form.querySelector(this._selectors.submitButtonSelector);\n    this._inputList = Array.from(this._form.querySelectorAll(this._selectors.inputSelector));\n  }\n\n  // проверка валидности формы\n  _isFormValid() {\n    return this._inputList.every(input => {\n      return this._isInputValid(input);\n    });\n  }\n  _isInputValid(input) {\n    return input.validity.valid;\n  }\n\n  // проверка валидности ввода\n  _checkValidity(input) {\n    if (!this._isInputValid(input)) {\n      this._showInputError(input, input.validationMessage);\n    } else {\n      this._hideInputError(input);\n    }\n  }\n  _showInputError(input, errorMessage) {\n    const error = this._form.querySelector(`.${input.id}-error`);\n    error.textContent = errorMessage;\n    error.classList.add(this._selectors.errorClass);\n    input.classList.add(this._selectors.inputErrorClass);\n  }\n  _hideInputError(input) {\n    const error = this._form.querySelector(`.${input.id}-error`);\n    error.textContent = '';\n    error.classList.remove(this._selectors.errorClass);\n    input.classList.remove(this._selectors.inputErrorClass);\n  }\n  _setButtonState(bool) {\n    this._submitButton.disabled = bool;\n  }\n\n  // включение валидации\n  enableValidation() {\n    this._setButtonState(!this._isFormValid()); // изменение состояния кнопки\n\n    this._form.addEventListener('input', event => {\n      this._inputList.forEach(input => {\n        this._checkValidity(event.target);\n        this._setButtonState(!this._isFormValid());\n      });\n    });\n  }\n\n  // сброс валидационных сообщений\n  resetValidation() {\n    this._setButtonState(!this._isFormValid());\n    this._inputList.forEach(input => {\n      this._hideInputError(input);\n    });\n  }\n}\n\n// Validation\n\nfunction enableValidation(params) {\n  const formList = Array.from(document.forms);\n  formList.forEach(form => {\n    const validator = new FormValidator(params, form);\n    const formName = form.getAttribute('name');\n    formValidators[formName] = validator;\n    validator.enableValidation();\n  });\n  console.log('1');\n  console.log(formList);\n  console.log(validator);\n}\nenableValidation(validationParams);\nconsole.log(formValidators);\nexport default formValidators;","map":{"version":3,"names":["validationParams","formValidators","FormValidator","constructor","settings","form","_selectors","inputClass","inputSelector","inputErrorClass","errorClass","submitButtonSelector","_form","_submitButton","querySelector","_inputList","Array","from","querySelectorAll","_isFormValid","every","input","_isInputValid","validity","valid","_checkValidity","_showInputError","validationMessage","_hideInputError","errorMessage","error","id","textContent","classList","add","remove","_setButtonState","bool","disabled","enableValidation","addEventListener","event","forEach","target","resetValidation","params","formList","document","forms","validator","formName","getAttribute","console","log"],"sources":["C:/Users/kti/dev/mesto-react/src/utils/FormValidator.js"],"sourcesContent":["import {\n  validationParams,\n  formValidators,\n} from './constants';\n\nclass FormValidator {\n  constructor(settings, form) {\n    this._selectors = {\n      inputClass: settings.inputClass,\n      inputSelector: settings.inputSelector,\n      inputErrorClass: settings.inputErrorClass,\n      errorClass: settings.errorClass,\n      submitButtonSelector: settings.submitButtonSelector,\n    };\n    this._form = form;\n    this._submitButton = this._form.querySelector(this._selectors.submitButtonSelector);\n    this._inputList = Array.from(this._form.querySelectorAll(this._selectors.inputSelector));\n  }\n\n  // проверка валидности формы\n  _isFormValid() {\n    return this._inputList.every((input) => {\n      return this._isInputValid(input);\n    });\n  }\n\n  _isInputValid(input) {\n    return input.validity.valid;\n  }\n\n  // проверка валидности ввода\n  _checkValidity(input) {\n    if (!this._isInputValid(input)) {\n     this._showInputError(input, input.validationMessage);\n    } else {\n     this._hideInputError(input);\n    }\n  }\n\n  _showInputError(input, errorMessage) {\n    const error = this._form.querySelector(`.${input.id}-error`);\n    error.textContent = errorMessage;\n    error.classList.add(this._selectors.errorClass);\n    input.classList.add(this._selectors.inputErrorClass);\n  }\n\n  _hideInputError(input) {\n    const error = this._form.querySelector(`.${input.id}-error`);\n    error.textContent = '';\n    error.classList.remove(this._selectors.errorClass);\n    input.classList.remove(this._selectors.inputErrorClass);\n  }\n\n  _setButtonState(bool) {\n    this._submitButton.disabled = bool;\n  }\n\n  // включение валидации\n  enableValidation() {\n    this._setButtonState(!this._isFormValid());  // изменение состояния кнопки\n\n    this._form.addEventListener('input', (event) => {\n      this._inputList.forEach((input) => {\n        this._checkValidity(event.target);\n        this._setButtonState(!this._isFormValid());\n      });\n    });\n  }\n\n  // сброс валидационных сообщений\n  resetValidation() {\n    this._setButtonState(!this._isFormValid());\n    this._inputList.forEach((input) => {\n      this._hideInputError(input);\n    });\n  }\n}\n\n// Validation\n\nfunction enableValidation(params) {\n  const formList = Array.from(document.forms);\n  formList.forEach((form) => {\n    const validator = new FormValidator(params, form);\n    const formName = form.getAttribute('name');\n    formValidators[formName] = validator;\n    validator.enableValidation();\n  });\n  console.log('1')\n  console.log(formList)\n  console.log(validator)\n}\nenableValidation(validationParams);\nconsole.log(formValidators)\nexport default formValidators;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}